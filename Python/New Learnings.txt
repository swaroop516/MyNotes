#ZIP-
zip will always return tuple

Python code-
b='abcdefghi'
for i in zip(*[iter(b)]*2):
    print(i)

Result-
('a', 'b')
('c', 'd')
('e', 'f')
('g', 'h')

#setdefault-
The setdefault() method returns the value of the item with the specified key.

If the key does not exist, insert the key, with the specified value

Python code-
car = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}

x = car.setdefault("color", "white")

print(x)

Result-
Mustang

#Append and Extend-
Append adds its argument as a single element to the end of a list. The length of the list itself will increase by one.
Extend iterates over its argument adding each element to the list, extending the list. The length of the list will increase by however many elements were in the iterable argument.

eg-
x = [1, 2, 3]
x.append([4, 5])
print(x)
[1, 2, 3, [4, 5]]

x = [1, 2, 3]
x.extend([4, 5])
print (x)
[1, 2, 3, 4, 5]


#Frequency in List
a = [1,1,1,1,2,2,2,2,3,3,4,5,5]
d = {x:a.count(x) for x in a}

#to print elements side by side
print(i,ends="")



##Instance method,Class method ,Static Method
Python code
class MyClass:
    def method(self):
        return 'instance method called', self

    @classmethod
    def classmethod(cls):
        return 'class method called', cls

    @staticmethod
    def staticmethod():
        return 'static method called'



#Instance method
The first method on MyClass, called method, is a regular instance method. That’s the basic, no-frills method type you’ll use most of the time. You can see the method takes one parameter, self, which points to an instance of MyClass when the method is called (but of course instance methods can accept more than just one parameter).

Through the self parameter, instance methods can freely access attributes and other methods on the same object. This gives them a lot of power when it comes to modifying an object’s state.

Not only can they modify object state, instance methods can also access the class itself through the self.__class__ attribute. This means instance methods can also modify class state.

#Class Method
Let’s compare that to the second method, MyClass.classmethod. I marked this method with a @classmethod decorator to flag it as a class method.

Instead of accepting a self parameter, class methods take a cls parameter that points to the class—and not the object instance—when the method is called.

Because the class method only has access to this cls argument, it can’t modify object instance state. That would require access to self. However, class methods can still modify class state that applies across all instances of the class.

#Static Method
Let’s compare that to the second method, MyClass.classmethod. I marked this method with a @classmethod decorator to flag it as a class method.

Instead of accepting a self parameter, class methods take a cls parameter that points to the class—and not the object instance—when the method is called.

Because the class method only has access to this cls argument, it can’t modify object instance state. That would require access to self. However, class methods can still modify class state that applies across all instances of the class.
=======
#to get all modules and versions
pip freeze 

